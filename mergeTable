#!/usr/bin/env python
# -*- coding: utf-8 -*-

# need to change a lot !
import pandas as pd 
import argparse
from io import StringIO
import sys
from signal import signal, SIGPIPE, SIG_DFL
import warnings

warnings.filterwarnings("ignore")
signal(SIGPIPE,SIG_DFL) #prevent IOError: [Errno 32] Broken pipe. If pipe closed by 'head'.

def getParser():
    parser = argparse.ArgumentParser(description="""parse SIFTS API output json at https://www.ebi.ac.uk/pdbe/api/doc/sifts.html, extract UniProt mapping results from SIFTS Mappings to a csv file of all results, Example: echo "idx,out\n3,a\n5,b\n8,c" > A.csv ; seq 1 10|mergeTable --left A.csv --hasHeader_left --col_left 0 --sep_left ",";rm A.csv""")
    parser.add_argument("--left", dest="A", required=False, help="left table", type=str)
    parser.add_argument("--right", dest="B", required=False, help="right table", type=str)

    parser.add_argument("--col_left", dest="col_A", default=0, type=int, help="col_left start from 0 ")
    parser.add_argument("--col_right", dest="col_B", default=0, type=int, help="col_right start from 0")

    parser.add_argument("--hasHeader_left", dest="hasHeader_A", action="store_true", help="hasHeader_left ")
    parser.add_argument("--hasHeader_right", dest="hasHeader_B", action="store_true", help="hasHeader_right ")

    parser.add_argument("--sep_left", dest="sep_A", default="\t", type=str, help="sep of left")
    parser.add_argument("--sep_right", dest="sep_B", default="\t", type=str, help="sep of right")

    parser.add_argument("--diff", dest="is_diff", action="store_true", help="left - right")
    parser.add_argument("--how", dest="how", default="inner", type=str, help="""
    how : {'left', 'right', 'outer', 'inner', 'cross'}, default 'inner'
    Type of merge to be performed.

    left: use only keys from left frame, similar to a SQL left outer join; preserve key order.
    right: use only keys from right frame, similar to a SQL right outer join; preserve key order.
    outer: use union of keys from both frames, similar to a SQL full outer join; sort keys lexicographically.
    inner: use intersection of keys from both frames, similar to a SQL inner join; preserve the order of the left keys.
    cross: creates the cartesian product from both frames, preserves the order of the left keys.
    """
    )

    return parser

def load_stdin2df(sep="\t", header=None, **kwargs):
    with StringIO(sys.stdin.read()) as f:
        return pd.read_csv(f, sep=sep, header=header, **kwargs)
    
if __name__ == "__main__":
    parser = getParser()
    args = parser.parse_args()

    A = args.A
    B = args.B 

    sep_A = args.sep_A
    sep_B = args.sep_B

    hasHeader_A = args.hasHeader_A
    hasHeader_B = args.hasHeader_B

    header_A = 0 if hasHeader_A else None
    header_B = 0 if hasHeader_B else None

    how = args.how
    IS_DIFF = args.is_diff 
    if A is None and B:
        df_A = load_stdin2df(sep=sep_A, header = header_A, index_col=None, dtype=object)
        df_B = pd.read_csv(B, sep=sep_B, header = header_B, index_col=None, dtype=object) 
    elif B is None and A:
        df_A = pd.read_csv(A, sep=sep_A, header = header_A, index_col=None, dtype=object)
        df_B = load_stdin2df(sep=sep_B, header = header_B, index_col=None, dtype=object)
    elif A and B:
        df_A = pd.read_csv(A, sep=sep_A, header = header_A, index_col=None, dtype=object)
        df_B = pd.read_csv(B, sep=sep_B, header = header_B, index_col=None, dtype=object) 

    elif A is None and B is None:
        raise TypeError(f"-A or -B should be specific as at least one")

    col_A = df_A.columns[args.col_A] 
    col_B = df_B.columns[args.col_B]

    df_B.rename({col_B:col_A}, axis=1, inplace=True)  # rename B -> A at col_B -> col_A
    col_B = col_A

    if not IS_DIFF:
        merge_df = pd.merge(left=df_A, right=df_B, left_on=col_A, right_on=col_B, how=how)
        merge_df.to_csv("test.out1", sep="\t")
        if not merge_df.empty:
            merge_df.to_csv(sys.stdout, sep="\t", index=None, header=True if any([hasHeader_A, hasHeader_B]) else False)
    if IS_DIFF:
        left_key = set(df_A[col_A])
        right_key = set(df_B[col_B])

        diff_left_minus_right = left_key.difference(right_key)

        bool_filter = df_A[col_A].apply(lambda x: x in diff_left_minus_right)
        out_df = df_A[bool_filter]
        
        out_df.to_csv(sys.stdout, sep="\t", index=None, header=True if hasHeader_A else False)



